# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
# Multiple python version config script from
# https://github.com/adambrenecki/virtualfish/blob/aa3d6271bcb86ad27b6d24f96b5bd386d176f588/.circleci/config.yml
#
#
version: 2
workflows:
  version: 2
  test:
    jobs:
      - test-3.6
      - test-2.7
jobs:
  test-3.6: &test-template   
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            if python -c "import venv" ; then
                echo "Installing Python 3+"
                python -m venv venv 
                . venv/bin/activate
                pip install -r requirements.txt
            else    
                echo "Installing Python 2.7+"
                chown -R $USER:$USER /home/circleci/repo/venv/bin/python
                virtualenv venv
                . venv/bin/activate
                pip install -r requirements.txt
            fi    

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate

            # Install package and build binaries
            python setup.py build_ext --inplace --force
            
            # Remove warnings
            export PYTHONWARNINGS="ignore"

            # Running tests
            python -W ignore `which nosetests` hydrodiy/io
            python -W ignore `which nosetests` hydrodiy/data
            python -W ignore `which nosetests` hydrodiy/stat
            python -W ignore `which nosetests` hydrodiy/plot
            python -W ignore `which nosetests` hydrodiy/gis

            # coverage
            coverage xml --rcfile=.coveragerc

            # Pylint
            #pylint --rcfile pylintrc hydrodiy > pylint_results

            # Install hydrodiy
            python setup.py install
            
            # Running examples
            python -W ignore examples/run_all_examples.py

            # Get list of functions skipping files with basemap
            python -W ignore listmembers.py -s
            
      - store_artifacts:
          path: test-reports
          destination: test-reports
          
      - store_artifacts:
          path: pylint-results
          destination: pylint_results
          
      - store_artifacts:
          path: listmembers.html
          destination: listmembers
          
  test-2.7:
    <<: *test-template
    docker:
      - image: circleci/python:2.7


